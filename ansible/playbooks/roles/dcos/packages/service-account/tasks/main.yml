---
- name: Aquire Auth token 
  shell: dcos config show core.dcos_acs_token
  register: auth_token
  changed_when: False


- name: Resolve secret name 
  set_fact: 
    secret_name: "{{ services[0].name}}/{{services[0].secret_name | default('secret') }}"


- name: Aquire secrets in secret store
  command: "dcos security secrets get {{secret_name}} --json"
  register: secrets_json

  
- block: 
    - name: Create Key pair 
      command: "dcos security org service-accounts keypair {{item.name}}.pem {{item.name}}-pub.pem creates={{item.name}}.pem"
      with_items: "{{services}}"


    - name: Create service account as ID
      command: "dcos security org service-accounts create -p {{item.name}}-pub.pem -d '{{item.name}} service account' {{item.name}}"
      with_items: "{{services}}"


    - name: Create service secret as Password
      command: "dcos security secrets create-sa-secret {% if edcos_security_mode == 'strict'%} --strict {% endif %} {{item.name}}.pem {{item.name}} {{item.name}}/{{item.secret_name | default('secret') }}"
      with_items: "{{services}}"
  when: ( (secrets_json.stdout | from_json)['value'] | from_json) )['uid'] != services[0].name


- name: Create permissions for {{ item.0.name }}
  uri:
    url: "{{dcos_cluster_url}}/acs/api/v1/acls/{{item.1.perm}}"
    method: PUT
    validate_certs: False
    headers: 
      Authorization: "token={{auth_token.stdout}}"
    body_format: json
    body: ' { "description": "{{item.1.desc}}" } '
    status_code: 409, 201 #201 means created
  with_subelements:
    - "{{services}}"
    - permissions


- name: Assign the permissions to {{ item.0.name }}
  uri:
    url: "{{dcos_cluster_url}}/acs/api/v1/acls/{{item.1.perm}}/users/{{item.0.name}}/{{item.1.action}}"
    method: PUT
    validate_certs: False
    headers: 
      Authorization: "token={{auth_token.stdout}}"  
    status_code: 409, 204 # 204 means no content(success)
  with_subelements:
    - "{{services}}"
    - permissions