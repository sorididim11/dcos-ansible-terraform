--- 

- name: Aquire Auth token 
  shell: dcos config show core.dcos_acs_token
  register: auth_token


- name: Read security mode of the cluster
  uri:
    url: "https://{{dcos_first_master_internal_ip}}/dcos-metadata/{{item}}"
    return_content: yes
    method: GET
    validate_certs: False
    headers: 
      Authorization: "token={{auth_token.stdout}}"
      Accept: "application/json"
  register: dcos_metadata_jsons
  with_items:
    - bootstrap-config.json
    - dcos-version.json


- name: Extract security mode and version from dcos metadata
  set_fact: 
    edcos_security_mode: "{{ (dcos_metadata_jsons.results[0].content | from_json)['security'] }}"
    dcos_version: "{{ (dcos_metadata_jsons.results[1].content | from_json)['version'] }}"
    


- assert: { that: "edcos_security_mode != 'strict'", msg: "What??? you are already in strict mode!! "}
- debug:  msg="Current security mode, {{edcos_security_mode}}"


- name: Update fact, edcos_security_mode  
  set_fact: 
    edcos_security_mode: "{{ (edcos_security_mode == 'permissive') | ternary('strict', 'permissive')  }}"

- debug:  msg="Upgrade Security to {{edcos_security_mode}}. DC/OS {{dcos_version}}"


- name: Download DC/OS installer
  get_url:
    url: "{{ dcos_installer_download_url }}"
    dest: "{{ dcos_bootstrap_root_path }}/{{ dcos_installer_name }}"
    force: no
    validate_certs: no
  environment: "{{proxy_env}}"


- name: Check if config file exists
  stat: path="{{ dcos_bootstrap_root_path }}/genconf/config.yaml"
  register: is_config_file


- name: Regenerate DC/OS config file with security mode, {{edcos_security_mode}}
  template:
    src: config.yaml.j2
    dest: "{{ dcos_bootstrap_root_path }}/genconf/config.yaml"
  when: is_config_file.stat.exists == False


- name: Modify config.yml file with new security mode 
  lineinfile:    
    dest: "{{ dcos_bootstrap_root_path }}/genconf/config.yaml"
    regexp: "^security:"
    line: "security: {{edcos_security_mode}}"
  when: is_config_file.stat.exists == True


- name: Generate a upgrade script file
  become: yes
  command: "bash {{ dcos_installer_name }} --generate-node-upgrade-script {{dcos_version}}"
  register: upgrade_script_url
  args:
    chdir: "{{ dcos_bootstrap_root_path }}"


- name: Extract only URL 
  set_fact: 
    upgrade_url: "{{ upgrade_script_url.stdout | regex_replace('https?://[^\\s]+dcos_node_upgrade.sh', '') }}"
   
- debug:  msg="Upgrade script url, {{upgrade_script_url}} , {{upgrade_url}}"
