--- 

- assert: { that: "ansible_local['bootstrap-config'].security != 'strict'", msg: "What??? you are already in strict mode!! "}
- debug:  msg="Current security mode, {{ansible_local['bootstrap-config'].security}}"


- name: Update fact, edcos_security_mode  
  set_fact: 
    edcos_security_mode: "{{ (ansible_local.bootstrap-config.security == 'permissive') | ternary('strict', 'permissive')  }}"
    dcos_version: "{{ansible_local.dcos-version.version}}"


- debug:  msg="Upgrade Security to {{edcos_security_mode}}. DC/OS {{dcos_version}}"


- name: Download DC/OS installer
  get_url:
    url: "{{ dcos_installer_download_url }}"
    dest: "{{ dcos_bootstrap_root_path }}/{{ dcos_installer_name }}"
    force: no
    validate_certs: no
  environment: "{{proxy_env}}"


- name: Check if config file exists
  stat: path="{{ dcos_bootstrap_root_path }}/genconf/config.yaml"
  register: is_config_file


- name: Generate DC/OS config file with for security mode, {{edcos_security_mode}}
  template:
    src: config.yaml.j2
    dest: "{{ dcos_bootstrap_root_path }}/genconf/config.yaml"
  when: is_config_file.stat.exists == False 


- name: Update config.yml file with new security mode , {{edcos_security_mode}}
  lineinfile:    
    dest: "{{ dcos_bootstrap_root_path }}/genconf/config.yaml"
    regexp: "^security:"
    line: "security: {{edcos_security_mode}}"
  when: is_config_file.stat.exists == True


- name: Generate upgrade scripts
  become: yes
  command: "bash {{ dcos_installer_name }} --generate-node-upgrade-script {{dcos_version}}"
  register: upgrade_script_url
  args:
    chdir: "{{ dcos_bootstrap_root_path }}"


- name: Aquire upgrade script URL of Bootstrap web server
  set_fact: 
    upgrade_url: "{{ upgrade_script_url.stdout | regex_search('https?:[^\\s]+dcos_node_upgrade.sh') }}"
   
- debug:  msg="Upgrade script URL, {{upgrade_url}}"
