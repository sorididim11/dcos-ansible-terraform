---
- name: Generate DC/OS upgrade scripts for security
  hosts: dcos_bootstrap
  gather_facts: False
  tags: ['upgrade-security']
  roles:
    - dcos/bootstrap/upgrade 
    - { role: dcos/bootstrap/boot_web, tags: [ 'upgrade-master' ] }
  environment: "{{ proxy_env }}"


- name: "Upgrade security of Masters"
  gather_facts: False
  hosts: dcos_masters
  tags: ['upgrade-security']
  serial: 1
  roles:
    - { role: dcos/node/upgrade-node, node_type: master} 
  environment: "{{ proxy_env }}"


- name: "Upgrade security of Slaves"
  gather_facts: False
  hosts: dcos_slaves
  tags: ['upgrade-security-slave']
  serial: 1
  roles:
    - { role: dcos/node/upgrade-node, node_type: slave, svc_name: dcos-mesos-slave  } 
  environment: "{{ proxy_env }}"


- name: "Upgrade security of Slaves public"
  gather_facts: False
  hosts: dcos_slaves_public
  tags: ['upgrade-security']
  serial: 1
  roles:
    - { role: dcos/node/upgrade-node, node_type: slave, svc_name: dcos-mesos-slave-public } 
  environment: "{{ proxy_env }}"


- name: Update edcos_security_mode ingroup_vars 
  hosts: dcos_bootstrap
  gather_facts: False
  tags: ['upgrade-security']
  tasks:
    - name: Update config.yml file with new security mode , {{edcos_security_mode}}
      lineinfile: 
        dest: "{{inventory_dir}}/group_vars/all.yml"
        regexp: "{{item.regex}}"
        line: "{{item.replace_with}}"
      with_items:
        - regex: '^edcos_security_mode:'
          replace_with: "edcos_security_mode: {{edcos_security_mode}}"
        - regex: '^dcos_version:'
          replace_with: "dcos_version: {{dcos_version}}"
      environment: "{{ proxy_env }}"