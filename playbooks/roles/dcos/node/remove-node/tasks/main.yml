---


# - name: Generate maintenance spec file of mesos 
#   template: src=maintenance.json.j2 dest=./maintenance.json


# - name: Generate machine down spec file of mesos 
#   template: src=machine_down.json.j2 dest=./machine-down.json


# - name: Put a node in maintenace mode 
#   uri:
#     url: http://{{ groups['dcos_master'][0] }}:5050/maintenace/schedule
#     method: POST
#     headers: 
#       Content-Type: "application/json"
#     body: "{{ lookup('file','maintenance.json') }}"
    

# - name: Get a machine down from mesos
#   uri:
#     url: http://{{ groups['dcos_master'][0] }}:5050/machine/down
#     method: POST
#     headers: 
#       Content-Type: "application/json"
#     body: "{{ lookup('file','machine_down.json') }}"


# - name: Check if the target  is slave
#   command: systemctl status dcos-mesos-slave
#   register: is_slave
#   changed_when: false
#   ignore_errors: yes


# - name: Check if the target  is slave_public
#   command: systemctl status dcos-mesos-slave-public
#   register: is_slave_public
#   changed_when: false
#   ignore_errors: yes


# - name: Check if this target is master
#   fail: 
#     msg: "the target node is master node or not part of the cluster"
#   when: (is_slave | failed) and (is_slave_public | failed)


# - name: Set service name to slave
#   set_fact: service_name=dcos-mesos-slave
#   when: not (is_slave | failed)


# - name: Set service name to slave-public
#   set_fact: service_name=dcos-mesos-slave-public
#   when: not (is_slave_public | failed)


- name: Deregister a node {{service_name}} from the cluster 
  command: systemctl kill -s SIGUSR1 {{service_name}} && systemctl stop {{service_name}}
  delegate_to: "{{ item }}"
  with_items: "{{ groups['maintenance'] }}"